<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: design-pattern | 子龙山人]]></title>
  <link href="http://andyque.github.com/blog/categories/design-pattern/atom.xml" rel="self"/>
  <link href="http://andyque.github.com/"/>
  <updated>2013-01-22T15:43:02+08:00</updated>
  <id>http://andyque.github.com/</id>
  <author>
    <name><![CDATA[Guanghui.Qu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[cocosd-x设计模式之 ：委托和委托设计模式]]></title>
    <link href="http://andyque.github.com/blog/2012/11/19/cocos2d-x-design-pattern-9-delegation/"/>
    <updated>2012-11-19T17:49:00+08:00</updated>
    <id>http://andyque.github.com/blog/2012/11/19/cocos2d-x-design-pattern-9-delegation</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/posts/2dxlogo.png" width="300" height="300"></p>

<p>前言：</p>

<p>前一篇文章讨论了cocos2d-x里面的中介者模式，但是，由于概念把握上面的偏差，我把GoF的中介者模式搞混淆了。幸好有读者给我提出了这个问题，我在上一篇文章中也补充说明了。虽然我谈到的应用场景跟中介者模式有点类似，但是，经典的模式就是模式，我不能随便篡改，更不能张冠李戴。所以，这篇文章我将谈到的是委托模式（delegation pattern），而不是GoF里面的代理模式（Proxy pattern）,虽然delegate也可以翻译成“代理”，但是，为了以示区别，这里使用委托。当然，文章观点如果有误，欢迎大家指出。</p>

<!--more-->


<p>在讨论cocos2d-x里面的委托模式之前，先来讲讲什么是委托，以及c++里面如何实现委托。委托通常还会跟回调、闭包联系在一起，而委托和委托模式也有一点区别。下面先看看委托模式的例子</p>

<p>一个打印机类的委托模式实现：</p>

<p>``` c++
class RealPrinter { // the "delegate"
public:</p>

<pre><code> void print() {
    //do something
 }
</code></pre>

<p> }；</p>

<p>class Printer {      // the "delegator"
public:</p>

<pre><code> Printer(): p(new RealPrinter()){} // create the delegate
 void print() {
   p-&gt;print(); // delegation
 }
 ~Printer(){
   if(NULL != p){
      delete p;
      p = NULL;
   }
 }
</code></pre>

<p>private:</p>

<pre><code> RealPrinter *p;
</code></pre>

<p> };</p>

<p>int main()
{</p>

<pre><code>Printer *p = new Printer;
p-&gt;print();  //client don’t know the exists of delegate class
delete p;
</code></pre>

<p>}
```</p>

<p>Printer这个类要实现打印功能，它不是自己去实现，而是委托RealPrinter这个类来实现。更一般化的示例如下：</p>

<p>``` c++
class PrinterDelegate{
public:</p>

<pre><code>virtual ~PrinterDelegate(){} // why virtual function , see Effective c++ Item 7.
virtual void print() = 0;
</code></pre>

<p>};</p>

<p>class RealPrinter : public PrinterDelegate { // the "delegate"
public:</p>

<pre><code>void print() {
    //do something
}
</code></pre>

<p>};</p>

<p>class Printer{
public:</p>

<pre><code>Printer():delegate(new RealPrinter){}
void print(){
    if (NULL != delegate) {
        delegate-&gt;print();
    }
}
~Printer(){
   if(NULL != delegate){
      delete delegate;
      delegate = NULL;
   }
 }
</code></pre>

<p>private:</p>

<pre><code>PrinterDelegate *delegate;
</code></pre>

<p>};</p>

<p>int main()
{</p>

<pre><code>Printer *p = new Printer;
p-&gt;print();  //client don’t know the exists of delegate class
delete p;
</code></pre>

<p>}</p>

<p>```</p>

<p>看完这个实现之后，相信大家对objc里面的delegate如何用c++实现也差不多有了解了吧。其实很简单，就是一个针对接口编程嘛。关于如何实现mvc，Cocos2d-x中文论坛里面已经有一个人给出了一个<a href="http://cn.cocos2d-x.org/bbs/forum.php?mod=viewthread&amp;tid=686&amp;highlight=mvc">样例实现</a>，具体我没怎么看，大家参考一下吧。</p>

<p>看完这个实现之后，你可能会说，“切！这就是你说的委托模式啊，也太简单了吧”。不过，我们要把委托更一般化，或者更具体化。用过c＃的朋友都知道，c#里面有一种类型delegate，它可以申明委托方法，从而实现事件驱动编程。具体的内容读者可以百度“c#的委托和事件”。</p>

<p>其实委托就是一个方法，但是它可以被当作“First-classvariable”来对待。即函数可以被存储，被传参，还可以从其它函数内部返回。拥有这种特性，同时大量采用这种特性的语言还有javascript，lua等，这也是现在我们津津乐道的函数式编程。那么c++能不能拥有函数式编程体验呢？答案是肯定的。c++中的函数指针，指向成员函数的指针、函数子对象都可以被存储、被传参，还可以从其它函数内部返回。而cocos2d-x里面也是大量采用了这种指向成员函数的指针来实现委托，这个留到后面再讨论。自从c++11的标准发布以后，我们还可以采用lambda表达式。那么c++到底有多少种方式可以实现委托呢？请参考这个<a href="http://stackoverflow.com/questions/9568150/what-is-a-c-delegate">链接</a>。对于更多的实现委托的方式，可以参考文章结尾给出的链接，很重要哦，感兴趣的读者不可错过。看完这些文章，相信读者对于什么是委托、c++里面如何实现委托以及什么是委托模式，它们之间有什么区别应该比较清楚了。</p>

<p>好了，讲了这么多题外话，现在回到cocos2d-x的委托设计模式发掘中来吧！</p>

<h3>一、应用场景</h3>

<p>在挖掘委托模式之前，我们先探究一下，什么情况下会使用委托模式。（因为我们前面回答了what和how的问题，现在来研究下when）。如果我们了解了应用委托模式的一般原则和场景，那么接下来的发掘过程会容易很多。</p>

<p>一个典型的应用场景是GUI编程中，当一个按钮被点击或者一个窗口被关闭时，程序需要做相应的响应，这时候就需要委托了。什么意思呢？因为我们的GUI程序一直在等待用户输入，然后根据用户输入作出相应的响应，在用户没有做出“按下按钮”这个动作之前，我们的程序是不知道如何响应的。这个按钮被按下去的响应动作，在你设计按钮类的时候是无法确定的，必须在客户程序中指定。客户程序实现响应按钮事件的接口，然后注册，这样当事件发生的时候，客户端程序类（相当于委托类）就可以作出定制的处理了。</p>

<p>这种在运行时刻进行任务委派的功能，在设计框架和可重用的组件的时候非常有用，大名鼎鼎的MVC就大量采用了委托设计模式（观察者模式和策略模式都可以看到是一般化的委托模式）。</p>

<p>这时候，我们再来挖掘cocos2d-x里面的委托设计模式，其实已经非常简单了。Cocos2d-x里面的CCMenu的响应事件，CCControlButton的响应事件，还有一大堆scheduler的实现，都采用了委托设计模式。它的实现细节就是采用了指向成员函数的指针，不过由于采用了宏定义的方式，所以编写代码还算方便。打开CCObject.h，你可以看到一大堆函数指针和相关的宏定义：</p>

<p>``` c++
typedef void (CCObject::<em>SEL_SCHEDULE)(float);
typedef void (CCObject::</em>SEL_CallFunc)();
typedef void (CCObject::<em>SEL_CallFuncN)(CCNode</em>);
typedef void (CCObject::<em>SEL_CallFuncND)(CCNode</em>, void<em>);
typedef void (CCObject::</em>SEL_CallFuncO)(CCObject<em>);
typedef void (CCObject::</em>SEL_MenuHandler)(CCObject<em>);
typedef void (CCObject::</em>SEL_EventHandler)(CCEvent<em>);
typedef int (CCObject::</em>SEL_Compare)(CCObject*);</p>

<h1>define schedule_selector(<em>SELECTOR) (SEL_SCHEDULE)(&amp;</em>SELECTOR)</h1>

<h1>define callfunc_selector(<em>SELECTOR) (SEL_CallFunc)(&amp;</em>SELECTOR)</h1>

<h1>define callfuncN_selector(<em>SELECTOR) (SEL_CallFuncN)(&amp;</em>SELECTOR)</h1>

<h1>define callfuncND_selector(<em>SELECTOR) (SEL_CallFuncND)(&amp;</em>SELECTOR)</h1>

<h1>define callfuncO_selector(<em>SELECTOR) (SEL_CallFuncO)(&amp;</em>SELECTOR)</h1>

<h1>define menu_selector(<em>SELECTOR) (SEL_MenuHandler)(&amp;</em>SELECTOR)</h1>

<h1>define event_selector(<em>SELECTOR) (SEL_EventHandler)(&amp;</em>SELECTOR)</h1>

<h1>define compare_selector(<em>SELECTOR) (SEL_Compare)(&amp;</em>SELECTOR)</h1>

<p>```</p>

<p>上面列举的是指向成员函数的指针来实现委托，那有没有采用接口来实现委托的呢？答案也是肯定的。在解析CocosBuilder生成的文件的时候，我们定制的类如果要关联成员变量，或者定义控件的响应消息的话，都需要实现相应的委托接口，如下：</p>

<p>``` c++
class AnimationsTestLayer
: public cocos2d::CCLayer
, public cocos2d::extension::CCBSelectorResolver
, public cocos2d::extension::CCBMemberVariableAssigner
{</p>

<pre><code>virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, cocos2d::CCString * pSelectorName);
virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(cocos2d::CCObject * pTarget, cocos2d::CCString * pSelectorName);
virtual bool onAssignCCBMemberVariable(cocos2d::CCObject * pTarget, cocos2d::CCString * pMemberVariableName, cocos2d::CCNode * pNode);

void onCCControlButtonIdleClicked(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
void onCCControlButtonWaveClicked(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
void onCCControlButtonJumpClicked(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
void onCCControlButtonFunkyClicked(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
</code></pre>

<p>｝
```</p>

<p>这中间很多代码省略掉了，具体的可以查考cocos2d-x自带的test里面的extensionTest。</p>

<h3>二、该模式优缺点</h3>

<p>优点：</p>

<p>1、解耦，将应用相关的内容与框架完全分享出来，在设计可重用的组件的时候特别有用。</p>

<p>2、可扩展性和可配置性高，而且可以在运行时候切换委托对象，具有很强的灵活性。</p>

<p>缺点：</p>

<p>1、采用接口的实现，由于使用了虚函数，所以性能上会有一点损失。虽然采用指向成员函数的指针的方式来实现效率非常高，但是，语法很诡异，使用起来其实还是不太爽的。尽管cocos2d-x已经用宏定义让使用方便了一些。</p>

<p>2、如果过度使用，容易导致职责分散，导致维护麻烦。</p>

<h3>三、定义及一般实现</h3>

<p>定义：参考<a href="http://en.wikipedia.org/wiki/Delegation_pattern">维基百科</a>（因为我实在是很难给出一个精确的定义orz）</p>

<p>一般实现：也请参考<a href="http://en.wikipedia.org/wiki/Delegation_pattern">维基百科</a>（呵呵，其实之前已经在文章最开始的时候给出来了）</p>

<h3>四、游戏开发中如何运用此模式</h3>

<p>其实就是你要设计一些可重用的组件，或者有些行为在编译的时候无法确定，需要根据运行时环境指定，也可以采用委托。其实说白了，也就是对象组合+针对接口编程的产物。如果遵守了这些良好的设计原则，你的软件系统之中到处可以见到委托的缩影。</p>

<p>当然，前面讨论的委托还是两个对象之间通信的一种方式。为什么不直接通信呢？因为解耦嘛，你懂的。</p>

<p>最后，我还是给出一个我自己使用委托设计的可重用的<a href="http://dl.vmall.com/c0of5hl18w">模态对话框类</a>。注意，这里采用的是cocos2d-iphone设计的。读者如果有兴趣，可以改成c++来实现，权当是一次练手的机会啦。</p>

<h3>五、与其它模式的关系</h3>

<p>委托模式与mvc、观察者和策略模式有着千丝万缕的联系：）。</p>

<h3>References:</h3>

<p><a href="http://en.wikipedia.org/wiki/Delegation_(programming">http://en.wikipedia.org/wiki/Delegation_(programming)</a>)</p>

<p><a href="http://en.wikipedia.org/wiki/Delegation_pattern">http://en.wikipedia.org/wiki/Delegation_pattern</a></p>

<p><a href="http://allenchou.net/2012/04/easy-c-delegates/">http://allenchou.net/2012/04/easy-c-delegates/</a></p>

<p><a href="http://allenchou.net/2012/04/function-pointers-vs-member-function-pointers/">http://allenchou.net/2012/04/function-pointers-vs-member-function-pointers/</a></p>

<p><a href="http://www.codeproject.com/Articles/7150/Member-Function-Pointers-and-the-Fastest-Possible">http://www.codeproject.com/Articles/7150/Member-Function-Pointers-and-the-Fastest-Possible</a></p>

<p><a href="http://stackoverflow.com/questions/9568150/what-is-a-c-delegate">http://stackoverflow.com/questions/9568150/what-is-a-c-delegate</a></p>

<p><a href="http://www.cppblog.com/huangwei1024/archive/2010/11/17/133870.html">http://www.cppblog.com/huangwei1024/archive/2010/11/17/133870.html</a></p>

<p><a href="http://www.codeproject.com/Articles/11464/Yet-Another-C-style-Delegate-Class-in-Standard-C">http://www.codeproject.com/Articles/11464/Yet-Another-C-style-Delegate-Class-in-Standard-C</a></p>

<p><a href="http://www.codeproject.com/Articles/13287/Fast-C-Delegate">http://www.codeproject.com/Articles/13287/Fast-C-Delegate</a></p>

<p><a href="http://www.codeproject.com/Articles/11015/The-Impossibly-Fast-C-Delegates">http://www.codeproject.com/Articles/11015/The-Impossibly-Fast-C-Delegates</a></p>

<p>欢迎读者批评指正，如果有兴趣跟我一起挖掘cocos2d-x中所涉及到的设计模式的朋友，可以给我发邮件：guanghui8827@126.com或者直接留言。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cocosd-x设计模式之 ：中介者模式]]></title>
    <link href="http://andyque.github.com/blog/2012/11/12/cocos2d-x-desin-patterns-8-mediator/"/>
    <updated>2012-11-12T17:49:00+08:00</updated>
    <id>http://andyque.github.com/blog/2012/11/12/cocos2d-x-desin-patterns-8-mediator</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/posts/2dxlogo.png" width="300" height="300">
前言：</p>

<p>上上周写了关于<a href="http://www.zilongshanren.com/cocos2d-x-design-pattern-6-observer/">cocos2d-x里面的观察者模式</a>，文章最后提到一个应用场景：“你的GameScene里面有两个layer，一个gameLayer，它包含了游戏中的对象，比如玩家、敌人等。另一个层是HudLayer，它包含了游戏中显示分数、生命值等信息。如何让这两个层相互通信。”</p>

<p>关于这两个层之间如何通信的问题，读者Llllong和我畅快淋漓地讨论了一番，详细的内容可以参考那篇文章的留言部分。最后，我们总结出三种通信方式：委托、观察者模式、中介者模式。（PS：剧透一下，下周跟大家一起来探讨一下cocos2d-x里面的委托设计模式。我去年翻译了<a href="http://www.cnblogs.com/andyque/archive/2012/03/11/2390814.html">cocos2d如何实现mvc系列文章</a>，里面涉及到委托的使用，可是代码是objc写的，有一些童鞋不知道c++如何实现委托，导致port代码有困难。别急，下周我们见分晓。）</p>

<p>本文将延续前面几篇文章的风格，跟大家一起来探讨cocos2d-x里面的中介者模式。也非常欢迎读者对此文进行拍砖，很多思绪的火光，“拍着拍着”就冒出来了。</p>

<!--more-->


<h2>1、应用场景</h2>

<p>谈到中介者模式这个词，我马上就想到了cocos2d-x里面的CCDirector类。这个类除了应用了单例模式，还应用了中介者模式。Why？因为它封装了CCScheduler、CCActionManager、CCTouchDispatcher、CCKeypadDispatcher和CCAccelerometer这五个对象的交互。它使得这几个对象之间的交互不需要显式地相互引用，使其耦合度变低。当然更多的是使得我们游戏中的对象可以方便地与这些类进行交互，而不需要显式地引用这些类。同时，由于CCDirector类被设计成单例类，这样更加方便了客户程序。</p>

<p>由于之前CCScheduler、CCActionManager、CCTouchDispatcher这些类都被设计成了单例类，现在通过CCDirector这个中介类，减少了系统中单例的数目，同时也使得这些类获得了单例的属性。（唯一实例和全局访问点都靠CCDirector类来保障，这也是我为什么在介绍单例模式的时候讲过一句话“至少需要一个单例模式”的原因，因为其它“单例”可以通过此单例也获得“单例的属性”）</p>

<p>补充：我这里介绍的CCDirector的应用场景，跟GoF标准中介者设计模式存在一定出入，但是，我觉得某些思想是相通的。GoF中提到的中介者模式的本质是“封装交互”，这一点在CCDirector类中并没有体现出来。我这里冒然将二者联系在一起，实属认识上的不足，可能得了所谓的“模式病”吧。大家注意区分一下就行啦。所以，我感觉有时候设计思想比模式本身更重要，希望我尽快修成正果。</p>

<h2>2、使用该模式的优缺点</h2>

<p>优点：</p>

<p>1）、把多个同事对象的交互封装到一个中介者对象中，使得同事对象之间松散耦合，互不依赖</p>

<p>2）、集中控制交互</p>

<p>3）、多对多变成了一对多</p>

<p>缺点：</p>

<p>1）、容易造成中介者对象变成巨无霸类，维护和修改变得更加困难</p>

<h2>3、模式定义及一般实现</h2>

<p>定义：</p>

<p>用一个中介对象来封装一系列的对象交互。中介者使得各对象不需要显式地相互引用，从而使其松散耦合，而且可以独立地改变它们之间的交互。</p>

<p>UML图：</p>

<p><img class="left" src="/images/posts/mediator.jpg" width="750" height="300"></p>

<p>一般实现：参考<a href="http://en.wikipedia.org/wiki/Mediator_pattern">wikipedia</a></p>

<h2>4、游戏开发中如何运用此模式</h2>

<p>游戏世界里的对象关系非常复杂，如果设计得不好，极容易形成强耦合。而游戏天生又是需要经常更新、修改bug和升级的，这就导致了游戏程序的维护和扩展非常地难。使用中介者模式可以减少游戏世界里面对象之间的多对多关系，使之转变成多对一的关系。</p>

<p>关于中介者的实现，可以把AppDelegate类设计成中介者对象，也可以自定义中介者对象，比如GameManager类。把此类设计成单例类，可以方便访问，同时，此类可以拥有像gameScene，levelSaver等类的引用，方便其它对象与这些对象进行交互。</p>

<h2>5、与其它模式的关系</h2>

<p>中介者模式的实现可以采用单例模式，参考CCDirector的实现。同时，在处理同事对象之间的交互的时候，可以采用观察者模式。</p>

<p>欢迎读者批评指正，如果有兴趣跟我一起挖掘cocos2d-x中所涉及到的设计模式的朋友，可以给我发邮件：guanghui8827@126.com或者直接留言。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cocosd-x设计模式之 ：组合模式]]></title>
    <link href="http://andyque.github.com/blog/2012/11/05/cocos2d-x-design-patterns-7-composite/"/>
    <updated>2012-11-05T17:49:00+08:00</updated>
    <id>http://andyque.github.com/blog/2012/11/05/cocos2d-x-design-patterns-7-composite</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/posts/2dxlogo.png" width="300" height="300"></p>

<p>在开始挖掘cocos2d-x里面的组合模式之前，我武断地下个结论：</p>

<p>“几乎所有与GUI相关的框架设计都应用了组合设计模式”。（PS：大家注意我的用词，是“几乎所有”，给自己留条后路，哈哈）</p>

<h2>1、应用场景</h2>

<p>Cocoa编程框架APPKit和UIKit都应用了组合模式，各种各样的View及其派生类组成了一棵树状结构的层级视图，而这里面就应用了组合模式。当然，Cocos2D-x里面的Node组织方式也采用的是这个方法，最终游戏界面中的Nodes也会形成一棵树。</p>

<p>说到树，我们马上就会想到树根，树干和树叶。一棵树一般只包含一个根，若干树干和大量的叶子。同时，树干长在树根上，树叶长在树干上。（PS：这有点废话了，不过读者莫急，耐着性着往下看。）对应于Cocos2d-x里面，就是一个游戏有一个主场景GameScene，它是树根，然后它有若干个树干（GameLayer、HudLayer、InputLayer、BackgroundLayer和LevelLayer等），最后，每一个树干又包含若干个树叶（比如sprite、particles、font、TiledMap nodes、etc）。</p>

<!--more-->


<p><img class="left" src="/images/posts/tree-nodes-labeled.png" width="750" height="300"></p>

<p>说完了这些，你可能会问了，这跟组合模式有毛关系啊。好，组合模式正式登场！</p>

<p>cocos2d-x里面的CCScene、CCLayer、CCNode派生类(不含CCLayer和CCScene)共同组成了一个树形结构，同时我们可以以一致地方式来处理这些类，比如addChild、removeChild和getChildren。处理“整体-部分关系”（通常是树形结构），并且能够以一致地方式来对待整体与部分，这不正是组合模式的应用场景吗。</p>

<h2>2、使用该模式的优缺点</h2>

<p>优点：</p>

<p>1）、优化处理递归或分级数据结构。</p>

<p>2）、一致地对待组合对象与单个对象，可以简化客户端调用</p>

<p>缺点：</p>

<p>1）、如果是透明实现的组合模式，单个对象也会包含组合对象的方法，这样会给客户端调用造成麻烦，因为单个对象实际上是不会实现这些组合对象的方法的。</p>

<h2>3、模式定义及一般实现</h2>

<p>模式定义：</p>

<p>将对象组合成树形结构以表示“部分整体”的层次结构。组合模式使得用户对单个对象和使用具有一致性。</p>

<p>UML类图：</p>

<p><img class="left" src="/images/posts/600px-Composite_UML_class_diagram_fixed.svg_.png" width="750" height="300"></p>

<p>一般实现：参考<a href="http://www.cnblogs.com/tiandsp/archive/2012/06/26/2563575.html">这篇文章</a></p>

<h2>4、游戏开发中如何运用此模式</h2>

<p>因为游戏开发不是设计框架，基本上使用组合模式的情形不多。但是，如果有递归或者树形结构的对象关系，都可以考虑使用组合模式。</p>

<h2>5、与其它模式的关系</h2>

<p>暂不讨论</p>

<p>欢迎读者批评指正，如果有兴趣跟我一起挖掘cocos2d-x中所涉及到的设计模式的朋友，可以给我发邮件：guanghui8827@126.com或者直接留言。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cocosd-x设计模式之 ：观察者模式]]></title>
    <link href="http://andyque.github.com/blog/2012/10/29/cocos2d-x-design-pattern-6-observer/"/>
    <updated>2012-10-29T17:49:00+08:00</updated>
    <id>http://andyque.github.com/blog/2012/10/29/cocos2d-x-design-pattern-6-observer</id>
    <content type="html"><![CDATA[<h2>1、应用场景</h2>

<p><img class="right" src="/images/posts/2dxlogo.png" width="300" height="300"></p>

<p>前面在介绍单例模式的时候，提到了一个类CCNotificationCenter，它除了应用单例模式以外，还应用了观察者模式。CCNotificationCenter类是观察者模式中的目标对象，而CCNotificationObserver则是观察者。</p>

<p>一个目标对象可以注册多个观察者，当目标对象的状态改变的时候，可以通知观察者对象作出相应的响应。这是标准的观察者模式的实现，但是CCNotificationCenter稍微有些许差别。</p>

<!--more-->


<p>首先，CCNotificationCenter不是通过自身状态改变来通知观察者，而是通过显式地发送观察者感兴趣的消息（postNotification）来通知它们。每一种消息类型可以对应多个观察者，同时，每一个观察者也可以“观察”多个消息类型。其次，观察者定义相应的响应事件同消息类型关联，当某个地方触发postNotification来广播一个消息的时候，CCNotificationCenter会遍历所有的观察者，判断它们注册的消息类型是否匹配，如果匹配，则触发相应的注册响应事件。最后，该观察者模式采用的是推模型，即由目标对象去通知所有的观察者。</p>

<p>其实CCNotificationCenter和CCNotificationObserver更准确的叫法是：<a href="http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">订阅发布模式</a>。</p>

<h2>2、使用此模式的优缺点</h2>

<p>优点：</p>

<p>1）实现了目标对象和观察者之间的抽象耦合，在本例中，则是实现了消息与观察者的抽象耦合。可以定义一种消息与消息处理对象的一对多的关系，而不用担心彼此的实现细节。</p>

<p>2）观察者模式可以定义某种意义上的广播通信机制。</p>

<p>3）实现订阅者与发布者的松散耦合，同时保障了良好的扩展性。</p>

<p>缺点：</p>

<p>1）注册成为CCNotificationCenter的观察者后，如果忘记调用removeObserver，则会引起内存泄漏。因为addObserver会把观察者的引用计算加1.</p>

<h2>3、此模式的定义及一般实现</h2>

<p>定义：</p>

<p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p>

<p>UML图：
<img class="left" src="/images/posts/500px-Observer.svg_.png" width="750" height="300"></p>

<p>一般实现：参考CCNotificationCenter.h和CCNotification.cpp文件的实现</p>

<h2>4、游戏开发中如何运用此模式</h2>

<p>我们考虑cocos2d-x中一个非常典型的应用场景，你的GameScene里面有两个layer，一个gameLayer，它包含了游戏中的对象，比如玩家、敌人等。另一个层是HudLayer，它包含了游戏中显示分数、生命值等信息。如何让这两个层相互通信。</p>

<p>第一种办法，你可以让gameLayer包含一个hudLayer的引用，同时也可以让hudLayer包含一个gameLayer的引用。注意！这里问题出现了，如果两个类都包含彼此的强引用（所谓强引用就是retain），就会引起循环引用的情况，如果其中一个类包含的是弱引用，问题就不会出现。循环引用是使用引用计数管理内存的一个致命弱点，会导致资源永远得不到释放，而且查错起来非常麻烦。</p>

<p>第二种办法，把gameScene做成一个单例，同时让gameScene包含gameLayer和hudLayer的弱引用，这样就可以直接通过[GameScene sharedInstance].gameLayer或者[GameScene sharedInstance].hudLayer来访问了。</p>

<p>第三种办法，使用gameLayer->getParent()获得gameScene，再使用gameScene来获得hudLayer。</p>

<p>第四种办法，使用CCNotificationCenter。当hudLayer注册它感兴趣的消息，当gameLayer需要通知hudLayer的时候，只需通过CCNotificationCenter发送一个对应的消息即可。</p>

<h2>5、此模式与其它模式的关系</h2>

<p>观察者模式是实现MVC模式的重要组成部分，一个model可以对应多个views，model就是目标对象，而view则是观察者，当model改变的时候，要通知所有的view也相应的改变。</p>

<p>欢迎读者批评指正，如果有兴趣跟我一起挖掘cocos2d-x中所涉及到的设计模式的朋友，可以给我发邮件：guanghui8827@126.com或者直接留言。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cocosd-x设计模式之 ：防御式编程模式]]></title>
    <link href="http://andyque.github.com/blog/2012/10/21/cocos2d-x-design-patterns-5-protection-programming/"/>
    <updated>2012-10-21T17:49:00+08:00</updated>
    <id>http://andyque.github.com/blog/2012/10/21/cocos2d-x-design-patterns-5-protection-programming</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/posts/2dxlogo.png" width="300" height="300"></p>

<p>声明：防御式编程是提高程序代码质量的一种手段，它不能算是真正意义上的模式。但是，这里，我还是要给它冠之以“模式”二字。</p>

<p>原因有2：</p>

<p>1.cocos2d-x的框架源代码大量采用了防御式编程技术，用来确保框架的代码质量和稳定性。</p>

<p>2.标题党，引起大家对于防御式编程的重视。特别是当大家给cocos2d-x贡献源代码的时候，更应该要注意保证代码质量。因为，王哲大大在review很多人给cocos2d-x贡献代码时发现，这种防御式编程代码并不多，需要引起我们的注意。</p>

<!--more-->


<h2>1.应用场景</h2>

<p>首先，第一个大量使用的是CCLayer的init函数：</p>

<p>``` c++
bool CCLayer::init()
{</p>

<pre><code>bool bRet = false;
do
{
    CCDirector * pDirector;
    CC_BREAK_IF(!(pDirector = CCDirector::sharedDirector()));
    this-&gt;setContentSize(pDirector-&gt;getWinSize());
    m_bIsTouchEnabled = false;
    m_bIsAccelerometerEnabled = false;
    // success
    bRet = true;
} while(0);
return bRet;
</code></pre>

<p>}
```</p>

<p>这里使用了do…while(0);惯用法，同时配合CC_BREAK_IF宏来做错误处理。关于为什么要使用do…while(0)惯用法，可以参考<a href="http://www.cnblogs.com/baiyanhuang/archive/2009/09/16/1730736.html">这篇文章</a>：</p>

<p>另一个地方就是一些内存管理的宏，这些宏可以帮助我们编写更健壮的内存管理代码：</p>

<p>``` c++</p>

<h1>define CC_SAFE_DELETE(p)            do { if(p) { delete (p); (p) = 0; } } while(0)</h1>

<h1>define CC_SAFE_DELETE_ARRAY(p)     do { if(p) { delete[] (p); (p) = 0; } } while(0)</h1>

<h1>define CC_SAFE_FREE(p)                do { if(p) { free(p); (p) = 0; } } while(0)</h1>

<h1>define CC_SAFE_RELEASE(p)            do { if(p) { (p)->release(); } } while(0)</h1>

<h1>define CC_SAFE_RELEASE_NULL(p)        do { if(p) { (p)->release(); (p) = 0; } } while(0)</h1>

<h1>define CC_SAFE_RETAIN(p)            do { if(p) { (p)->retain(); } } while(0)</h1>

<p>```</p>

<p>最后一个地方，就是在函数的入口处，或者需要保证某些“不变量”的时候，使用assert断言来确保参数和返回结果的有效性。这个在cocos2d-x的源代码中也到处是可以看到的。</p>

<h2>2.使用此模式的优缺点</h2>

<p>优点：</p>

<p>提高代码质量，使得代码的健壮性和稳定性都有保障。可以防止子程序由于接收到了非法数据而遭受破坏。</p>

<p>缺点：</p>

<p>过度的防御式编程也会引来问题，如果你在每一个能想到的地方用每一种能想到的方法检查从参数传入的数据，那么你的程序将会变得臃肿而缓慢。更糟糕的是，防御式编程引入的额外代码增加了软件的复杂度。所以运用是需谨慎。</p>

<h2>3.此模式的定义及一般实现</h2>

<p>子程序应该不因传入错误数据而被破坏，哪怕是由其他子程序产生的错误数据。</p>

<p>我们一般可以采用以下手段来进行防御式编程：</p>

<p>1）检查每个子程序的入口参数，记住“垃圾进、垃圾出”这个隐喻。必要的时候可以使用断言来确保函数的先验条件是符合假定的。因为很多时候，我们编写代码都是隐藏了一系列的假定的，只是你自己没有感觉到，有时候，这些假定没有关系，出了bug也容易找出来。但是，有时候，就不是那么幸运了。</p>

<p>2）不要直接使用文字常量，比如3、“Hero.png”这种常量。尽可能地定义const定义常量或者使用宏定义。</p>

<p>3）尽可能让函数返回一些东西，这样如果当函数运行出现问题时，可以根据返回值做一些处理。如果全部设计成void类型的函数，那么出现异常要么就是try—catch，要么就是直接让程序崩溃了。由于c++的异常机制并不是那么完善，所以，也一直为人们所诟病，cocos2d-x里面几乎没有使用c++的异常处理机制。最后，必要的时候要检查函数里面调用其它子程序时的返回值。</p>

<h2>4.实际开发中如何采用此模式</h2>

<p>在实际开发中，我个人觉得必要的防御式编程的态度和做法还是要有的。特别是函数的输入输出，因为函数的逻辑部分是我们关注地最多的，虽然它是最复杂的，但是，往往这部分出错的概率不高。</p>

<p>相反，是函数的一些边界条件和异常情况导致程序bug的滋生。有些时候除了验证函数参数的数据值范围有效性以外，更加要注意的是验证数据的业务条件是否满足。这一点恰恰最容易被忽视。</p>

<p>在做内存管理的时候，尽可能地使用cocos2d-x里面定义的一些宏来清理资源，比如CC_SAFE_DELETE等。当实现自定义的CCLayer对象的时候，也尽可能地采用do…while(0)的写法，如果里面出现问题，可以用CC_BREAK_IF来判断并退出。</p>

<h2>5.此模式与其它模式的关系</h2>

<p>暂不讨论</p>

<p>欢迎读者批评指正，如果有兴趣跟我一起挖掘cocos2d-x中所涉及到的设计模式的朋友，可以给我发邮件：guanghui8827@126.com或者直接留言。</p>
]]></content>
  </entry>
  
</feed>
